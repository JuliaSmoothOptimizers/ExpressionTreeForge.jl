var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [CalculusTreeTools, abstract_expr_tree, trait_expr_tree, interface_expr_tree, implementation_pre_compiled_tree, implementation_pre_n_compiled_tree, implementation_expression_tree_Expr, implementation_expr_tree_Expr, implementation_expr_tree, implementation_complete_expr_tree, M_evaluation_expr_tree, bound_propagations, convexity_detection, algo_expr_tree, trait_expr_node, interface_expr_node, variables, variables_view, variables_n_view, times_operators, tan_operators, sinus_operators, simple_operators, power_operators, plus_operators, minus_operators, frac_operators, exp_operators, cos_operators, constants, abstract_expr_node, trait_tree, algo_tree, interface_tree, implementation_tree, implementation_tree_Expr, abstract_tree, trait_type_expr, interface_type_expr, implementation_type_expr, implementation_convexity_type]","category":"page"},{"location":"reference/#CalculusTreeTools.calcul_Hessian_expr_tree-Tuple{Any, AbstractVector}","page":"Reference","title":"CalculusTreeTools.calcul_Hessian_expr_tree","text":"calcul_Hessian_expr_tree(t, x)\n\nEvaluate the Hessian of the calculus tree t as the point x calculHessianexpr_tree( :(x[1]^2 + x[2]), ones(2))\n\n[2.0 0.0; 0.0 0.0]\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.calcul_gradient_expr_tree-Tuple{Any, AbstractVector}","page":"Reference","title":"CalculusTreeTools.calcul_gradient_expr_tree","text":"calcul_gradient_expr_tree(t, x)\n\nEvaluate the gradient of the calculus tree t as the point x calculgradientexpr_tree( :(x[1] + x[2]), ones(2))\n\n[1.0 1.0]\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.calcul_gradient_expr_tree2-Tuple{Any, AbstractVector}","page":"Reference","title":"CalculusTreeTools.calcul_gradient_expr_tree2","text":"calcul_gradient_expr_tree2(t, x)\n\nEvaluate the gradient of the calculus tree t as the point x calculgradientexpr_tree2( :(x[1] + x[2]), ones(2))\n\n[1.0 1.0]\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.cast_type_of_constant-Tuple{Any, DataType}","page":"Reference","title":"CalculusTreeTools.cast_type_of_constant","text":"cast_type_of_constant(expr_tree, t)\n\nCast the constant of the Calculus tree expr_tree to the type t.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.delete_imbricated_plus-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.delete_imbricated_plus","text":"delete_imbricated_plus(e)\n\nIf e represent a calculus tree, deleteimbricatedplus(e) will split that function into element function if it is possible. concretely if divides the tree into subtrees as long as top nodes are + or -\n\ndeleteimbricatedplus(:(x[1] + x[2] + x[3]*x[4] ) ) [ x[1], x[2], x[3] * x[4] ]\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.element_fun_from_N_to_Ni!-Tuple{Any, AbstractVector{Int64}}","page":"Reference","title":"CalculusTreeTools.element_fun_from_N_to_Ni!","text":"element_fun_from_N_to_Ni!(expr_tree, v)\n\nTransform the tree exprtree, which represent a function from Rⁿ ⇢ R, to an element, function from Rⁱ → R, where i is the length of the vector v . This function rename the variable of exprtree to x₁,x₂,... instead of x₇,x₉ for example elementfunfromNto_Ni!( :(x[4] + x[5]), [1,2])\n\n:(x[1] + x[2])\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.evaluate_expr_tree-Union{Tuple{T}, Tuple{Any, AbstractVector{T}}} where T<:Number","page":"Reference","title":"CalculusTreeTools.evaluate_expr_tree","text":"evaluate_expr_tree(t, x)\n\nevaluate the Calculus tree t using the vector x as value for the variables in t. evaluateexprtree(:(x[1] + x[2]), ones(2))\n\n2\n\nevaluateexprtree(:(x[1] + x[2]), [0,1])\n\n1\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.get_Ui-Tuple{Vector{Int64}, Int64}","page":"Reference","title":"CalculusTreeTools.get_Ui","text":"get_Ui(index_new_var, n)\n\nCreate a the matrix U associated to the variable appearing in indexnewvar. This function create a sparse matrix of size length(indexnewvar)×n.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.get_elemental_variable-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.get_elemental_variable","text":"get_elemental_variable(expr_tree)\n\nReturn the index of the variable appearing in the expression tree getelementalvariable( :(x[1] + x[3]) )\n\n[1, 3]\n\ngetelementalvariable( :(x[1]^2 + x[6] + x[2]) )\n\n[1, 6, 2]\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.get_function_of_evaluation-Tuple{CalculusTreeTools.implementation_tree.type_node{CalculusTreeTools.abstract_expr_node.ab_ex_nd}}","page":"Reference","title":"CalculusTreeTools.get_function_of_evaluation","text":"get_function_of_evaluation(ex)\n\nReturn a evaluation function of ex with better performance than the actual evaluateexprtree.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.get_type_tree-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.get_type_tree","text":"get_type_tree(t)\n\nReturn the type of the expression tree t, whose the types are defined in typeexpr/impltype_expr.jl\n\ngettypetree( :(5+4)) = constant gettypetree( :(x[1])) = linear gettypetree( :(x[1]* x[2])) = quadratic\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.transform_to_Expr-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.transform_to_Expr","text":"transform_to_Expr(expr_tree)\n\nTransform into an Expr the parameter exprtree if exprtree satisfies the trait define in traitexprtree. ATTENTION: This function return an Expr with variable as MathOptInterface.VariableIndex In order to get an standard Expr see transformtoExpr_julia.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.transform_to_Expr_julia-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.transform_to_Expr_julia","text":"transform_to_Expr_julia(expr_tree)\n\nTransform into an Expr the parameter exprtree if exprtree satisfies the trait define in traitexprtree.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.transform_to_expr_tree-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.transform_to_expr_tree","text":"transform_to_expr_tree(Expr)\n\nTransform into an exprtree the parameter Expr if exprtree satisfies the trait define in traitexprtree\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.trait_expr_tree.expr_tree_to_create-Tuple{Any, Any}","page":"Reference","title":"CalculusTreeTools.trait_expr_tree.expr_tree_to_create","text":"exprtreeto_create(arbre créé, arbre d'origine) fonction ayant pour but d'homogénéiser 2 arbres quelconque peut importe leurs types.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.trait_expr_tree.get_real_node-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.trait_expr_tree.get_real_node","text":"getrealnode(a) Fonction à prendre avec des pincettes, pour le moment utiliser seulement sur les feuilles.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.trait_expr_tree.transform_to_Expr-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.trait_expr_tree.transform_to_Expr","text":"transformtoExpr(ex) This function transform an expr_tree and transform it in Expr.   #Deprecated\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.trait_expr_tree.transform_to_expr_tree-Tuple{T} where T","page":"Reference","title":"CalculusTreeTools.trait_expr_tree.transform_to_expr_tree","text":"transformtoexprtree(expressiontree) This function takes an argument expressiontree satisfying the trait isexprtree and return an expression tree of the type texprtree. This function is usefull in our algorithms to synchronise all the types satisfying the trait isexprtree (like Expr) to the type texpr_tree.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.M_evaluation_expr_tree._evaluate_expr_tree_multiple_points-Union{Tuple{N}, Tuple{T}, Tuple{CalculusTreeTools.implementation_tree.type_node{CalculusTreeTools.abstract_expr_node.ab_ex_nd}, Array{SubArray{T, 1, Vector{T}, N, false}, 1}}} where {T<:Number, N}","page":"Reference","title":"CalculusTreeTools.M_evaluation_expr_tree._evaluate_expr_tree_multiple_points","text":"evaluateexprtreemultiplepoints(exprtree, vecx) Evaluate the exprtree as many times as there is vector in vec_x\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.M_evaluation_expr_tree.calcul_Hessian_expr_tree-Tuple{Any, Vector}","page":"Reference","title":"CalculusTreeTools.M_evaluation_expr_tree.calcul_Hessian_expr_tree","text":"calcul_Hessian_expr_tree(expr_tree, x)\n\nCompute the hessian matrix of the function represented by expr_tree at the point x\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.M_evaluation_expr_tree.calcul_gradient_expr_tree-Tuple{Any, Vector}","page":"Reference","title":"CalculusTreeTools.M_evaluation_expr_tree.calcul_gradient_expr_tree","text":"calcul_gradient_expr_tree(expr_tree, x)\n\nEvaluation the gradient of the function represented by expr_tree at the point x\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.bound_propagations.set_bounds!-Union{Tuple{T}, Tuple{CalculusTreeTools.implementation_tree.type_node, CalculusTreeTools.implementation_tree.type_node{CalculusTreeTools.abstract_expr_tree.bounds{T}}}} where T<:Number","page":"Reference","title":"CalculusTreeTools.bound_propagations.set_bounds!","text":"set_bounds!(tree,bound_tre)\n\nPropagate the bounds for each node of tree\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.algo_expr_tree.cast_type_of_constant-Tuple{Any, DataType}","page":"Reference","title":"CalculusTreeTools.algo_expr_tree.cast_type_of_constant","text":"cast_type_of_constant(expr_tree, t)\n\nCast the constant of the expression tree expr_tree to the type t.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.algo_expr_tree.delete_imbricated_plus-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.algo_expr_tree.delete_imbricated_plus","text":"delete_imbricated_plus(t)\n\nt must be a type which satisfies the trait_expr_tree. In that case if\nt represent a function, delete_imbricated_plus(t) will split that function\ninto element function if it is possible.\n\ndelete_imbricated_plus(:(x[1] + x[2] + x[3]*x[4] ) )\n[\nx[1],\nx[2],\nx[3] * x[4]\n]\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.algo_expr_tree.element_fun_from_N_to_Ni!-Tuple{Any, Vector{Int64}}","page":"Reference","title":"CalculusTreeTools.algo_expr_tree.element_fun_from_N_to_Ni!","text":"element_fun_from_N_to_Ni!(expr_tree, vector)\n\nTransform the tree exprtree, which represent a function from Rⁿ ⇢ R, to an element function from Rⁱ → R . This function rename the variable of exprtree to x₁,x₂,... instead of x₇,x₉ for example\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.algo_expr_tree.get_Ui-Tuple{Vector{Int64}, Int64}","page":"Reference","title":"CalculusTreeTools.algo_expr_tree.get_Ui","text":"get_Ui(index_new_var, n)\n\nCreate a the matrix U associated to the variable appearing in indexnewvar. This function create a sparse matrix of size length(indexnewvar)×n.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.algo_expr_tree.get_elemental_variable-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.algo_expr_tree.get_elemental_variable","text":"get_elemental_variable(expr_tree)\n\nReturn the index of the variable appearing in the expression tree\n\nget_elemental_variable( :(x[1] + x[3]) )\n> [1, 3]\nget_elemental_variable( :(x[1]^2 + x[6] + x[2]) )\n> [1, 6, 2]\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.algo_expr_tree.get_type_tree-Tuple{Any}","page":"Reference","title":"CalculusTreeTools.algo_expr_tree.get_type_tree","text":"get_type_tree(t)\n\nReturn the type of the expression tree t, whose the type is inside the trait_expr_tree\n\nget_type_tree( :(5+4)) = constant\nget_type_tree( :(x[1])) = linear\nget_type_tree( :(x[1]* x[2])) = quadratic\n\n\n\n\n\n","category":"method"},{"location":"reference/#CalculusTreeTools.abstract_tree.ab_tree","page":"Reference","title":"CalculusTreeTools.abstract_tree.ab_tree","text":"définition du type abstrait tree\n\n\n\n\n\n","category":"type"},{"location":"reference/#CalculusTreeTools.abstract_tree.create_tree-Tuple{}","page":"Reference","title":"CalculusTreeTools.abstract_tree.create_tree","text":"création de la fonction create_tree qui est un constructeur des arbres,\non retrouvera dans  les fichiers d'implémentation\n\n\n\n\n\n","category":"method"},{"location":"#CalculusTreeTools.jl","page":"Home","title":"CalculusTreeTools.jl","text":"","category":"section"},{"location":"tutorial/#CalculusTreeTools.jl-Tutorial","page":"Tutorial","title":"CalculusTreeTools.jl Tutorial","text":"","category":"section"}]
}
